#!/usr/bin/python3

import time
from sys import argv
import os
import re
import requests
import urllib.parse
import subprocess
import bs4
import logging

logger = logging.getLogger(__name__)

to_do_list = []   # (when, showtuple)


def enqueue_magnet_link(magnet_link):
    assert magnet_link.startswith("magnet:"), magnet_link
    result = subprocess.run(["/usr/bin/deluge-console", "add %s" % magnet_link], stdout=subprocess.DEVNULL, timeout=10, check=True)

def search(show, season, episode):
    urlformat = "https://thepiratebay.org/search/%s/0/7/205"

    search_phrase = "%s S%02dE%02d" % (show, season, episode)
    url = urlformat % (urllib.parse.quote(search_phrase),)
    r = requests.get(url)

    if "No hits. Try adding an asterisk in you search phrase." in r.text:
        return

    if "Database maintenance, please check back" in r.text:
        logger.debug("Rescheduling %s %s %s for later.   %s", show, season, episode, url)
        to_do_list.append((time.time() + (10*60), (show, season, episode)))
        return

    soup = bs4.BeautifulSoup(r.text, "lxml", from_encoding="UTF-8")

    table = soup.find("table", id="searchResult")
    if not table:
        logger.error("Didn't find a table in result. %r", r.text)
        return

    for tr in table.find_all("tr", recursive=False):

        tds = tr.find_all("td")
        if not tds:
            logger.warn("Found no tds in tr  %r", tr)
            continue
        tdcategory, tdbody, tdseeder, tdleecher = tds

        if int(tdseeder.string) < 50:
            logger.debug("Hoping for %s %s %s but only %s seeders.", show, season, episode, tdseeder.string)
            continue

        if not tdbody.find_all("img", alt=("VIP", "Trusted", "Helper")):
            logger.debug("Skipping entry by an untrusted joe.  %s", tdbody)
            continue

        r = ".{0,3}".join(map(str, show.split())) + r".{0,3}(?:[12]\d\d\d\b.{0,3})?" + ".{0,3}".join(map(str, [season, episode])) + ".{0,45}$"
        if not re.match(r, tdbody.div.a.string, re.I):
            logger.debug("Search result %s too loose match for %s.", tdbody.div.a.string, r,)
            continue

        got.add(search_phrase)
        logger.info("Enqueueing %s %s %s", show, season, episode)
        enqueue_magnet_link(tdbody.find("a", recursive=False)["href"])
        return

def next_ep_this_season(show, season, ep):
    return (show, season, ep+1)

def next_ep_next_season(show, season, ep):
    return (show,season+1, 1)

got = set()

def discover(root):
    # discover what we have on disk
    have = set()
    want = set()
    for dirpath, dirnames, filenames in os.walk(root):
        for filename in filenames:
            match = re.match(r"^(.*?) \(s(\d\d)e(\d\d)-(\d\d)\)", filename)
            if match:
                have.add((match.group(1), int(match.group(2)), int(match.group(3))))
                want.add(next_ep_this_season(match.group(1), int(match.group(2)), int(match.group(4))))
                want.add(next_ep_next_season(match.group(1), int(match.group(2)), int(match.group(4))))
            else:
                match = re.match(r"^(.*?) \(s(\d\d)e(\d\d)\)", filename)
                if match:
                    have.add((match.group(1), int(match.group(2)), int(match.group(3))))
                    want.add(next_ep_this_season(match.group(1), int(match.group(2)), int(match.group(3))))
                    want.add(next_ep_next_season(match.group(1), int(match.group(2)), int(match.group(3))))
                else:
                    pass

    # discover what we are already downloading
    p = subprocess.Popen(["/usr/bin/deluge-console", "info"], stdout=subprocess.PIPE)
    for line in p.stdout:
        line = line.decode("UTF-8")
        if not line.startswith("Name: "):
            continue
        for i in want:
            if re.search(".{1,3}".join(map(str, tuple(i[0].split())+i[1:])), line, re.I):
                #print "# want", i, "but I think I'm already downloading", line,
                have.add(i)

    old = set()
    for showname, seriesnumber, episodenumber in want:
        if len([1 for h in have if h[0] == showname and h > (showname, seriesnumber, episodenumber)]) > 3:
            old.add((showname, seriesnumber, episodenumber))

    wanted = want - have

    return wanted - old


def process_wanted(wanted):
    for i, (name, season, episode) in enumerate(wanted):
        to_do_list.append((time.time() + (i*20), (name, season, episode)))

    start = time.time()

    while to_do_list and time.time() < (start + 60*60*8):
        to_do_list.sort()
        while to_do_list and to_do_list[0][0] < time.time():
            when, nse = to_do_list.pop(0)
            search(nse[0], nse[1], nse[2])
        time.sleep(5)

    if got and "dmsid" in os.environ:
        requests.get("http://dms.chad.org/switch/ping/{}?note=got%20".format(os.environ["dmsid"]) + ",%20".join(urllib.parse.quote("%s (s%02de%02d)" % (n, s, e)) for n, s, e in sorted(got)))


if __name__ == "__main__":

    logging.basicConfig(level=logging.ERROR)
    logger.setLevel(logging.DEBUG)

    if len(argv) == 2:
        wanted = discover(argv[1])
    elif len(argv) == 5:
        root = argv[1]
        wanted = { (argv[2], int(argv[3]), int(argv[4]),) }
    else:
        raise ValueError("expected params, either of\n  dir\n  dir showname seasonnumber episodenumber")

    process_wanted(wanted)
